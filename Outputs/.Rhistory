freq(SoilMoist)
Buf[is.na(Buf)] = 0
StandRefugia = Stand + SoilMoist + Buf
plot(StandRefugia)
writeRaster(StandRefugia,
filename =  paste0(wd,"Study_site/Stand_CA_Refugias.tif"),
format = "GTiff", datatype ="INT1U",overwrite=T)
Stand = paste0(wd, "Study_site/Stands_OnlyCA.tif") %>% raster()
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/"
setwd(wd)
library(magrittr)
#library(cowplot)
#library(ggplot2)
library(raster)
#library(animation)
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
CRSRef = crs(MA)
NrowRef = MA@nrows
NcolRef = MA@ncols
ResRef = res(MA)[1]
XminRef = MA@extent@xmin
XmaxRef = MA@extent@xmax
YminRef = MA@extent@ymin
YmaxRef = MA@extent@ymax
FreqTableMA = freq(MA, merge=T) %>% as.data.frame()
SoilMoist = paste0(wd, "Study_site/Annual-water-budget-1.img") %>% raster()
plot(SoilMoist)
Q = quantile(SoilMoist, probs = c(0.02, 0.98))
Q3 = as.numeric(Q[2])
values(SoilMoist)[values(SoilMoist) < Q3] = NA
values(SoilMoist)[values(SoilMoist) > 0] = 11
SoilMoist = raster(vals=getValues(SoilMoist),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(SoilMoist, merge=T) %>% as.data.frame()
plot(SoilMoist)
Buf = buffer(SoilMoist, width=300)
freq(Buf, merge=T) %>% as.data.frame()
values(Buf)[values(Buf) == 1] = 12
Buf = raster(vals=getValues(Buf),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(Buf, merge=T) %>% as.data.frame()
plot(Buf)
New_Ma = cover(SoilMoist, Buf, MA)
plot(New_Ma)
freq(New_Ma, merge=T) %>% as.data.frame() %>% tail()
writeRaster(New_Ma,
filename =  paste0(wd,"Study_site/Ownership_CA_Refugias.tif"),
format = "GTiff", datatype ="INT1U",overwrite=T)
Stand = paste0(wd, "Study_site/Stands_OnlyCA.tif") %>% raster()
SoilMoist[is.na(SoilMoist)] = 0
Buf[is.na(Buf)] = 0
StandRefugia = Stand + SoilMoist + Buf
plot(StandRefugia)
writeRaster(StandRefugia,
filename =  paste0(wd,"Study_site/Stand_CA_Refugias.tif"),
format = "GTiff", datatype ="INT4S",overwrite=T)
### Stacking lets us see where they overlap
Stack = stack(New_Ma,StandRefugia)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Dupl = unique( Stack_df[ , 1:2 ] )
print(Dupl)
N = sum(duplicated(Dupl))
View(Dupl)
N = sum(duplicated(Dupl[,2]))
Dupl = subset(Val, duplicated(Val[,2]))
### Stacking lets us see where they overlap
Stack = stack(New_Ma,StandRefugia)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Val = unique( Stack_df[ , 1:2 ] )
Val = unique( Stack_df[ , 1:2 ] )
Ndup = sum(duplicated(Val[,2]))
Dupl = subset(Val, duplicated(Val[,2]))
i=1
DupStand = Dupl[i,2]
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand]
View(Stack)
View(Stack)
names(New_Ma) = "New_Ma"
names(StandRefugia) = "StandRefugia"
### Stacking lets us see where they overlap
Stack = stack(New_Ma,StandRefugia)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Val = unique(Stack_df[ , 1:2 ])
Val = unique(Stack_df[ , 1:2 ])
Ndup = sum(duplicated(Val[,2]))
Dupl = subset(Val, duplicated(Val[,2]))
DupStand = Dupl[i,2]
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand]
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand] %>% unique()
if(DupMA[1] %in% c(11,12)) {DupMA=DupMA[1]}
else{DupMA=DupMA[1]}
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand] %>% unique()
if(DupMA[1] %in% c(11,12)) {DupMA=DupMA[1]}else{DupMA=DupMA[1]}
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/"
setwd(wd)
library(magrittr)
#library(cowplot)
#library(ggplot2)
library(raster)
#library(animation)
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
CRSRef = crs(MA)
NrowRef = MA@nrows
NcolRef = MA@ncols
ResRef = res(MA)[1]
XminRef = MA@extent@xmin
XmaxRef = MA@extent@xmax
YminRef = MA@extent@ymin
YmaxRef = MA@extent@ymax
FreqTableMA = freq(MA, merge=T) %>% as.data.frame()
SoilMoist = paste0(wd, "Study_site/Annual-water-budget-1.img") %>% raster()
plot(SoilMoist)
Q = quantile(SoilMoist, probs = c(0.02, 0.98))
Q3 = as.numeric(Q[2])
values(SoilMoist)[values(SoilMoist) < Q3] = NA
values(SoilMoist)[values(SoilMoist) > 0] = 11
SoilMoist = raster(vals=getValues(SoilMoist),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(SoilMoist, merge=T) %>% as.data.frame()
plot(SoilMoist)
Buf = buffer(SoilMoist, width=300)
freq(Buf, merge=T) %>% as.data.frame()
values(Buf)[values(Buf) == 1] = 12
Buf = raster(vals=getValues(Buf),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(Buf, merge=T) %>% as.data.frame()
plot(Buf)
New_Ma = cover(SoilMoist, Buf, MA)
plot(New_Ma)
freq(New_Ma, merge=T) %>% as.data.frame() %>% tail()
Stand = paste0(wd, "Study_site/Stands_OnlyCA.tif") %>% raster()
SoilMoist[is.na(SoilMoist)] = 0
Buf[is.na(Buf)] = 0
StandRefugia = Stand + SoilMoist + Buf
plot(StandRefugia)
writeRaster(StandRefugia,
filename =  paste0(wd,"Study_site/Stand_CA_Refugias.tif"),
format = "GTiff", datatype ="INT4S",overwrite=T)
names(New_Ma) = "New_Ma"
names(StandRefugia) = "StandRefugia"
### Stacking lets us see where they overlap
Stack = stack(New_Ma,StandRefugia)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Val = unique(Stack_df[ , 1:2 ])
Ndup = sum(duplicated(Val[,2]))
Dupl = subset(Val, duplicated(Val[,2]))
for(i in c(1:Ndup)){
DupStand = Dupl[i,2]
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand] %>% unique()
if(DupMA[1] %in% c(11,12)) {
Select_Ma = DupMA[1]
No_Ma = DupMA[2]
}else{
Select_Ma = DupMA[2]
No_Ma = DupMA[1]}
Stack$New_Ma[Stack$StandRefugia==DupStand &Stack$New_Ma==No_Ma] = Select_Ma
}
### And write the new management file
### This can be done in reverse, to change stands to a given managment.
writeRaster(Stack$New_Ma,
filename =  paste0(wd,"Study_site/Ownership_CA_Refugias.tif"),
format = "GTiff", datatype ="INT1U",overwrite=T)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Val = unique(Stack_df[ , 1:2 ])
Ndup = sum(duplicated(Val[,2]))
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/"
setwd(wd)
library(magrittr)
#library(cowplot)
#library(ggplot2)
library(raster)
#library(animation)
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
CRSRef = crs(MA)
NrowRef = MA@nrows
NcolRef = MA@ncols
ResRef = res(MA)[1]
XminRef = MA@extent@xmin
XmaxRef = MA@extent@xmax
YminRef = MA@extent@ymin
YmaxRef = MA@extent@ymax
FreqTableMA = freq(MA, merge=T) %>% as.data.frame()
SoilMoist = paste0(wd, "Study_site/Annual-water-budget-1.img") %>% raster()
plot(SoilMoist)
Q = quantile(SoilMoist, probs = c(0.25, 0.75))
Q3 = as.numeric(Q[2])
values(SoilMoist)[values(SoilMoist) < Q3] = NA
values(SoilMoist)[values(SoilMoist) > 0] = 11
SoilMoist = raster(vals=getValues(SoilMoist),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(SoilMoist, merge=T) %>% as.data.frame()
plot(SoilMoist)
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
CRSRef = crs(MA)
NrowRef = MA@nrows
NcolRef = MA@ncols
ResRef = res(MA)[1]
XminRef = MA@extent@xmin
XmaxRef = MA@extent@xmax
YminRef = MA@extent@ymin
YmaxRef = MA@extent@ymax
FreqTableMA = freq(MA, merge=T) %>% as.data.frame()
SoilMoist = paste0(wd, "Study_site/Annual-water-budget-1.img") %>% raster()
plot(SoilMoist)
Q = quantile(SoilMoist, probs = c(0.05, 0.95))
Q3 = as.numeric(Q[2])
values(SoilMoist)[values(SoilMoist) < Q3] = NA
values(SoilMoist)[values(SoilMoist) > 0] = 11
SoilMoist = raster(vals=getValues(SoilMoist),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(SoilMoist, merge=T) %>% as.data.frame()
plot(SoilMoist)
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(tidyverse)
library(sf)
library(nngeo)
Ownership_TotKlamath =
paste(wd,"/Study_site/E4_ownership_BAU_v4.tif",
sep = "") %>% raster()
Stands_TotKlamath =
paste(wd,"/Study_site/E4_stands_BAU_v5.tif",
sep = "") %>% raster()
ER_OnlyCA =
paste(wd,"/Study_site/ecoregions_v2.tif",
sep = "") %>% raster()
# this have the extent we want
ER_OnlyCA[ER_OnlyCA == 0] <- NA # We don't want the background
ER_OnlyCA_poly = rasterToPolygons(ER_OnlyCA, fun=function(x){x > 0}, dissolve = T)
Study_site = ER_OnlyCA_poly %>% st_as_sf %>%
st_union %>% st_remove_holes %>% st_as_sf
Border_export = sf:::as_Spatial(Study_site)
writeOGR(Border_export, dsn = paste(wd,"/Study_site/Study_site.shp",
sep = ""), layer = "map",
driver = "ESRI Shapefile" )
kable(data.frame("V1" = c(0.82, 0.53, 0.02, 0.0003),
"V2" = c(0.99, 0.76, 0.04, 0.0003),
"V3" = c(0.99, 0.90, 0.05, 0.0003),
"V4" = c(0.99, 0.99, 0.99, 0.0003),
"V5" = c(0.99, 0.99, 0.04, 0.0003),
row.names = c("DecayRateSurf","DecayRateSOM1",
"DecayRateSOM2", "DecayRateSOM3")),
caption = "Mortality depending on the scenario")
setwd("C:/Users/181248/Documents/181248/LANDIS II/R_calculus")
library(magrittr)
library(cowplot)
library(ggplot2)
library(raster)
library(knitr)
kable(data.frame("V1" = c(0.82, 0.53, 0.02, 0.0003),
"V2" = c(0.99, 0.76, 0.04, 0.0003),
"V3" = c(0.99, 0.90, 0.05, 0.0003),
"V4" = c(0.99, 0.99, 0.99, 0.0003),
"V5" = c(0.99, 0.99, 0.04, 0.0003),
row.names = c("DecayRateSurf","DecayRateSOM1",
"DecayRateSOM2", "DecayRateSOM3")),
caption = "Mortality depending on the scenario")
kable(data.frame("V1" = c(0.82, 0.53, 0.02, 0.0003),
"V2" = c(0.99, 0.76, 0.04, 0.0003),
"V3" = c(0.99, 0.90, 0.05, 0.0003),
"V4" = c(0.99, 0.99, 0.99, 0.0003),
"V5" = c(0.99, 0.99, 0.04, 0.0003),
row.names = c("DecayRateSurf","DecayRateSOM1",
"DecayRateSOM2", "DecayRateSOM3")),
caption = "Decay rates used in the vertions")
View(Study_site)
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(tidyverse)
library(sf)
library(nngeo)
st_write(Study_site, "Study_site.shp")
plot(ER_OnlyCA)
plot(ER_OnlyCA)
points(x = -2200000, y = 2400000)
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/"
setwd(wd)
library(magrittr)
#library(cowplot)
#library(ggplot2)
library(raster)
#library(animation)
MA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
CRSRef = crs(MA)
NrowRef = MA@nrows
NcolRef = MA@ncols
ResRef = res(MA)[1]
XminRef = MA@extent@xmin
XmaxRef = MA@extent@xmax
YminRef = MA@extent@ymin
YmaxRef = MA@extent@ymax
FreqTableMA = freq(MA, merge=T) %>% as.data.frame()
SoilMoist = paste0(wd, "Study_site/Annual-water-budget-1.img") %>% raster()
plot(SoilMoist)
Q = quantile(SoilMoist, probs = c(0.05, 0.95))
Q3 = as.numeric(Q[2])
values(SoilMoist)[values(SoilMoist) < Q3] = NA
values(SoilMoist)[values(SoilMoist) > 0] = 11
SoilMoist = raster(vals=getValues(SoilMoist),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(SoilMoist, merge=T) %>% as.data.frame()
plot(SoilMoist)
Buf = buffer(SoilMoist, width=300)
freq(Buf, merge=T) %>% as.data.frame()
values(Buf)[values(Buf) == 1] = 12
Buf = raster(vals=getValues(Buf),
nrow=NrowRef,ncol=NcolRef,resolution=ResRef,
xmn=XminRef, xmx=XmaxRef,ymn =YminRef,ymx=YmaxRef,crs=CRSRef)
freq(Buf, merge=T) %>% as.data.frame()
plot(Buf)
New_Ma = cover(SoilMoist, Buf, MA)
plot(New_Ma)
freq(New_Ma, merge=T) %>% as.data.frame() %>% tail()
Stand = paste0(wd, "Study_site/Stands_OnlyCA.tif") %>% raster()
SoilMoist[is.na(SoilMoist)] = 0
Buf[is.na(Buf)] = 0
StandRefugia = Stand + SoilMoist + Buf
plot(StandRefugia)
writeRaster(StandRefugia,
filename =  paste0(wd,"Study_site/Stand_CA_Refugias.tif"),
format = "GTiff", datatype ="INT4S",overwrite=T)
names(New_Ma) = "New_Ma"
names(StandRefugia) = "StandRefugia"
### Stacking lets us see where they overlap
Stack = stack(New_Ma,StandRefugia)
### This will show where all the duplicates exist.
Stack_df = as.data.frame(Stack)
Val = unique(Stack_df[ , 1:2 ])
Ndup = sum(duplicated(Val[,2]))
Dupl = subset(Val, duplicated(Val[,2]))
for(i in c(1:Ndup)){
DupStand = Dupl[i,2]
DupMA = Stack$New_Ma[Stack$StandRefugia==DupStand] %>% unique()
if(DupMA[1] %in% c(11,12)) {
Select_Ma = DupMA[1]
No_Ma = DupMA[2]
}else{
Select_Ma = DupMA[2]
No_Ma = DupMA[1]}
Stack$New_Ma[Stack$StandRefugia==DupStand &Stack$New_Ma==No_Ma] = Select_Ma
}
### And write the new management file
### This can be done in reverse, to change stands to a given managment.
writeRaster(Stack$New_Ma,
filename =  paste0(wd,"Study_site/Ownership_CA_Refugias.tif"),
format = "GTiff", datatype ="INT1U",overwrite=T)
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(magrittr)
library(sf)
library(nngeo)
pal.11 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey"))
pal.13 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey", "cyan","blue"))
pal.R = colorRampPalette(c("white", "grey", "grey","grey","grey","grey","grey","grey","grey","grey","grey", "cyan","blue"))
par(mfrow=c(2,2))
plot(Ownership_OnlyCA, main="Managment areas (BAU and Adaptability)",
col=pal.11(11))
Ownership_TotKlamath =
paste(wd,"/Study_site/E4_ownership_BAU_v4.tif",
sep = "") %>% raster()
Stands_TotKlamath =
paste(wd,"/Study_site/E4_stands_BAU_v5.tif",
sep = "") %>% raster()
ER_OnlyCA =
paste(wd,"/Study_site/ecoregions_v2.tif",
sep = "") %>% raster()
# this have the extent we want
ER_OnlyCA[ER_OnlyCA == 0] <- NA # We don't want the background
ER_OnlyCA_poly = rasterToPolygons(ER_OnlyCA, fun=function(x){x > 0}, dissolve = T)
Study_site = ER_OnlyCA_poly %>% st_as_sf %>%
st_union %>% st_remove_holes %>% st_as_sf
plot(Study_site, main = "Figure 1: Borders of the study area")
st_write(Study_site, "Study_site.shp")
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(magrittr)
library(sf)
library(nngeo)
pal.11 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey"))
pal.13 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey", "cyan","blue"))
pal.R = colorRampPalette(c("white", "grey", "grey","grey","grey","grey","grey","grey","grey","grey","grey", "cyan","blue"))
par(mfrow=c(2,2))
plot(Ownership_OnlyCA, main="Managment areas (BAU and Adaptability)",
col=pal.11(11))
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(magrittr)
library(sf)
library(nngeo)
Ownership_TotKlamath =
paste(wd,"/Study_site/E4_ownership_BAU_v4.tif",
sep = "") %>% raster()
Stands_TotKlamath =
paste(wd,"/Study_site/E4_stands_BAU_v5.tif",
sep = "") %>% raster()
ER_OnlyCA =
paste(wd,"/Study_site/ecoregions_v2.tif",
sep = "") %>% raster()
# this have the extent we want
ER_OnlyCA[ER_OnlyCA == 0] <- NA # We don't want the background
ER_OnlyCA_poly = rasterToPolygons(ER_OnlyCA, fun=function(x){x > 0}, dissolve = T)
Study_site = ER_OnlyCA_poly %>% st_as_sf %>%
st_union %>% st_remove_holes %>% st_as_sf
plot(Study_site, main = "Figure 1: Borders of the study area")
st_write(Study_site, "Study_site.shp")
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(magrittr)
library(sf)
library(nngeo)
pal.11 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey"))
pal.13 = colorRampPalette(c("white", "grey", "purple","grey","tomato","green4","green","yellow","red","grey","grey", "cyan","blue"))
pal.R = colorRampPalette(c("white", "grey", "grey","grey","grey","grey","grey","grey","grey","grey","grey", "cyan","blue"))
par(mfrow=c(2,2))
plot(Ownership_OnlyCA, main="Managment areas (BAU and Adaptability)",
col=pal.11(11))
wd = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus"
setwd(wd)
library(raster)
library(rgdal)
library(devtools)
library(magrittr)
library(sf)
library(nngeo)
Ownership_TotKlamath =
paste(wd,"/Study_site/E4_ownership_BAU_v4.tif",
sep = "") %>% raster()
Stands_TotKlamath =
paste(wd,"/Study_site/E4_stands_BAU_v5.tif",
sep = "") %>% raster()
ER_OnlyCA =
paste(wd,"/Study_site/ecoregions_v2.tif",
sep = "") %>% raster()
# this have the extent we want
ER_OnlyCA[ER_OnlyCA == 0] <- NA # We don't want the background
ER_OnlyCA_poly = rasterToPolygons(ER_OnlyCA, fun=function(x){x > 0}, dissolve = T)
Study_site = ER_OnlyCA_poly %>% st_as_sf %>%
st_union %>% st_remove_holes %>% st_as_sf
plot(Study_site, main = "Figure 1: Borders of the study area")
Ownership_OnlyCA_select = mask(Ownership_TotKlamath, Study_site)
Stands_OnlyCA_select = mask(Stands_TotKlamath, Study_site)
par(mfrow=c(2,2))
plot(Ownership_TotKlamath, main = "Figure 2.a: Ownership layer", xaxt="n", yaxt="n")
plot(Ownership_OnlyCA_select, main = "Figure 2.b: Ownership in study area", xaxt="n",
yaxt="n")
plot(Stands_TotKlamath, main = "Figure 2.c: Stands layer", xaxt="n", yaxt="n")
plot(Stands_OnlyCA_select, main = "Figure 2.d: Stands in study area", xaxt="n", yaxt="n")
print(c(ER_OnlyCA@ncols, ER_OnlyCA@nrows))
print(c(Ownership_OnlyCA_select@ncols, Ownership_OnlyCA_select@nrows))
print(c(Stands_OnlyCA_select@ncols, Stands_OnlyCA_select@nrows))
Ownership_OnlyCA_Crop = crop(Ownership_OnlyCA_select,ER_OnlyCA)
Stands_OnlyCA_Crop = crop(Stands_OnlyCA_select,ER_OnlyCA)
par(mfrow=c(2,2))
plot(Ownership_OnlyCA_select, main = "Figure 3.a: Ownership in study area", xaxt="n",
yaxt="n")
plot(Ownership_OnlyCA_Crop, main = "Figure 3.b: Ownership croped", xaxt="n", yaxt="n")
plot(Stands_OnlyCA_select, main = "Figure 3.c: Stands in study area", xaxt="n", yaxt="n")
plot(Stands_OnlyCA_Crop, main = "Figure 3.d: Stands croped", xaxt="n", yaxt="n")
print(c(ER_OnlyCA@ncols, ER_OnlyCA@nrows))
print(c(Ownership_OnlyCA_Crop@ncols, Ownership_OnlyCA_Crop@nrows))
print(c(Stands_OnlyCA_Crop@ncols, Stands_OnlyCA_Crop@nrows))
Ownership_OnlyCA = resample(Ownership_OnlyCA_Crop, ER_OnlyCA, method="ngb")
Stands_OnlyCA = resample(Stands_OnlyCA_Crop, ER_OnlyCA, method="ngb")
par(mfrow=c(2,2))
plot(Ownership_OnlyCA_Crop, main = "Figure 4.a: Ownership croped", xaxt="n", yaxt="n")
plot(Ownership_OnlyCA, main = "Figure 4.b: Ownership resampled", xaxt="n", yaxt="n")
plot(Stands_OnlyCA_Crop, main = "Figure 4.c: Stands croped", xaxt="n", yaxt="n")
plot(Stands_OnlyCA, main = "Figure 4.d: Stands resampled", xaxt="n", yaxt="n")
print(c(ER_OnlyCA@ncols, ER_OnlyCA@nrows))
print(c(Ownership_OnlyCA@ncols, Ownership_OnlyCA@nrows))
print(c(Stands_OnlyCA@ncols, Stands_OnlyCA@nrows))
Ownership_OnlyCA[is.na(Ownership_OnlyCA[])] = 0
Stands_OnlyCA[is.na(Stands_OnlyCA[])] = 0
writeRaster(Ownership_OnlyCA,
filename  = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/Study_site/Ownership_OnlyCA.tif",
format = "GTiff", datatype ="INT1U",overwrite=T)
writeRaster(Stands_OnlyCA,
filename  = "C:/Users/181248/Documents/181248/LANDIS II/R_calculus/Study_site/Stands_OnlyCA.tif",
format = "GTiff", datatype ="INT4S",overwrite=T)
Ownership_OnlyCA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
Ownership_OnlyCA = paste0(wd, "Study_site/Ownership_OnlyCA.tif") %>% raster()
